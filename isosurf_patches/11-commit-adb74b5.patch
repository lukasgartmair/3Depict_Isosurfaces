From adb74b558eab32c85d72a2412b3d537cd36f60ef Mon Sep 17 00:00:00 2001
From: D Haley <mycae@gmx.com>
Date: Tue, 4 Oct 2016 11:31:53 +0100
Subject: * Add fix for crash when no drawables


diff --git a/src/gl/drawables.cpp b/src/gl/drawables.cpp
index 01f1a1b..fbe929c 100755
--- a/src/gl/drawables.cpp
+++ b/src/gl/drawables.cpp
@@ -2715,19 +2715,36 @@ unsigned int LukasDrawIsoSurface::getType() const
 
 void LukasDrawIsoSurface::getBoundingBox(BoundCube &b) const
 {
-};
+}
 
 void LukasDrawIsoSurface::updateMesh() const
 {
+	//Not sure this is the right thing to do here.
+	// it looks like there exist cases where volumeToMesh does not work
+	// we should handle this before calling volumeToMesh
+	if(!points.size() || !triangles.size() || !quads.size())
+	{
+		cacheOK=false;
+		return;
+	}
+	
 
-	openvdb::tools::volumeToMesh<openvdb::FloatGrid>(*grid, points, triangles, quads, isovalue, adaptivity);	
-	cacheOK=true;
+	try
+	{
+		openvdb::tools::volumeToMesh<openvdb::FloatGrid>(*grid, points, triangles, quads, isovalue, adaptivity);	
+		cacheOK=true;
+	}
+	catch(const std::exception &e)
+	{
+		ASSERT(false);
+		cerr << "Exception! :" << e.what() << endl;
+	}
 	
 }
 
 void LukasDrawIsoSurface::draw() const
 {
-
+	cerr << "Starting lukas draw :" << endl;
 
 
 	if(!cacheOK)
@@ -2735,101 +2752,101 @@ void LukasDrawIsoSurface::draw() const
 		updateMesh();
 	}
 
-		int non_finites_counter = 0;
-		int xyzs = 3;
-		for (int i=0;i<points.size();i++)
+	int non_finites_counter = 0;
+	int xyzs = 3;
+	for (int i=0;i<points.size();i++)
+	{
+		for (int j=0;j<xyzs;j++)
 		{
-			for (int j=0;j<xyzs;j++)
-			{
-			    if (std::isfinite(points[i][j]) == false)
-				{	
-					non_finites_counter += 1;    
-				}
+		    if (std::isfinite(points[i][j]) == false)
+			{	
+				non_finites_counter += 1;    
 			}
 		}
-		//std::cout << "points size" << " = " << points.size() << std::endl;
-		//std::cout << "number_of_non_finites" << " = " << non_finites_counter << std::endl;
+	}
+	//std::cout << "points size" << " = " << points.size() << std::endl;
+	//std::cout << "number_of_non_finites" << " = " << non_finites_counter << std::endl;
 
-		// how are the -nans introduced if there is no -nan existing in the grid?! 
-		// setting only the nan to zero will of course result in large triangles crossing the scene
-		// setting all 3 coordinates to zero is also shit because triangles containing the point are also big
-		// how to overcome this without discarding them, which would end up in corrupt faces
-		// this behaviour gets checked in the vdb test suite
+	// how are the -nans introduced if there is no -nan existing in the grid?! 
+	// setting only the nan to zero will of course result in large triangles crossing the scene
+	// setting all 3 coordinates to zero is also shit because triangles containing the point are also big
+	// how to overcome this without discarding them, which would end up in corrupt faces
+	// this behaviour gets checked in the vdb test suite
 
-		xyzs = 3;
-		for(unsigned int ui=0;ui<points.size();ui++)
+	xyzs = 3;
+	for(unsigned int ui=0;ui<points.size();ui++)
+	{
+		for(unsigned int uj=0;uj<xyzs;uj++)
 		{
-			for(unsigned int uj=0;uj<xyzs;uj++)
+			if (std::isfinite(points[ui][uj]) == false)
 			{
-				if (std::isfinite(points[ui][uj]) == false)
+				for(unsigned int uk=0;uk<xyzs;uk++)
 				{
-					for(unsigned int uk=0;uk<xyzs;uk++)
-					{
-						points[ui][uk] = 0.0;
-					}
+					points[ui][uk] = 0.0;
 				}
 			}
 		}
+	}
 
 
 
-		//std::cout << "points size" << " = " << points.size() << std::endl;
-		//std::cout << "triangles size" << " = " << triangles.size() << std::endl;
-		//std::cout << " active voxel count subgrid div" << " = " << grid->activeVoxelCount() << std::endl;
+	//std::cout << "points size" << " = " << points.size() << std::endl;
+	//std::cout << "triangles size" << " = " << triangles.size() << std::endl;
+	//std::cout << " active voxel count subgrid div" << " = " << grid->activeVoxelCount() << std::endl;
 
-		// create a triangular mesh
-		int number_of_splitted_triangles = 2*quads.size();
-		std::vector<std::vector<float> > triangles_from_splitted_quads(number_of_splitted_triangles, std::vector<float>(xyzs));
+	// create a triangular mesh
+	int number_of_splitted_triangles = 2*quads.size();
+	std::vector<std::vector<float> > triangles_from_splitted_quads(number_of_splitted_triangles, std::vector<float>(xyzs));
 
-		triangles_from_splitted_quads = splitQuadsToTriangles(points, quads);
+	triangles_from_splitted_quads = splitQuadsToTriangles(points, quads);
 
-		std::vector<std::vector<float> > triangles_combined;
-		triangles_combined = concatenateTriangleVectors(triangles, triangles_from_splitted_quads);
+	std::vector<std::vector<float> > triangles_combined;
+	triangles_combined = concatenateTriangleVectors(triangles, triangles_from_splitted_quads);
 
-		// initialize triangle normals vector
-		int vertices_per_triangle = 3;
+	// initialize triangle normals vector
+	int vertices_per_triangle = 3;
 
-		std::cout << "number_of_triangles" << " = " << triangles_combined.size() << std::endl;
+	std::cout << "number_of_triangles" << " = " << triangles_combined.size() << std::endl;
 
-		std::vector<std::vector<float> > triangle_normals(triangles_combined.size(), std::vector<float>(vertices_per_triangle));
-		// calculate triangle normals
-		triangle_normals = ComputeTriangleNormalsVDB(points, triangles_combined);
+	std::vector<std::vector<float> > triangle_normals(triangles_combined.size(), std::vector<float>(vertices_per_triangle));
+	// calculate triangle normals
+	triangle_normals = ComputeTriangleNormalsVDB(points, triangles_combined);
 
-		int non_finite_tris_counter = 0;
-		for (int i=0;i<triangle_normals.size();i++)
+	int non_finite_tris_counter = 0;
+	for (int i=0;i<triangle_normals.size();i++)
+	{
+		for (int j=0;j<xyzs;j++)
 		{
-			for (int j=0;j<xyzs;j++)
-			{
-			    if (std::isfinite(triangle_normals[i][j]) == false)
-				{	
-					non_finite_tris_counter += 1; 
-					triangle_normals[i][j] = 0;   
-				}
+		    if (std::isfinite(triangle_normals[i][j]) == false)
+			{	
+				non_finite_tris_counter += 1; 
+				triangle_normals[i][j] = 0;   
 			}
-		}	
+		}
+	}	
 
-		std::cout << "nans in triangle normals" << " = " << non_finite_tris_counter << std::endl;
+	std::cout << "nans in triangle normals" << " = " << non_finite_tris_counter << std::endl;
 
-		//initialize triangle normals vector
-		std::vector<std::vector<float> > vertex_normals(points.size(),std::vector<float>(xyzs));
-		// calculate vertex normals 
-		vertex_normals = ComputeVertexNormals(triangles_combined, points, triangle_normals);
+	//initialize triangle normals vector
+	std::vector<std::vector<float> > vertex_normals(points.size(),std::vector<float>(xyzs));
+	// calculate vertex normals 
+	vertex_normals = ComputeVertexNormals(triangles_combined, points, triangle_normals);
 
-		std::cout << "vertex normals size" << " = " << vertex_normals.size() << std::endl;
-		int non_finite_verts_counter = 0;
-		for (int i=0;i<vertex_normals.size();i++)
+	std::cout << "vertex normals size" << " = " << vertex_normals.size() << std::endl;
+	int non_finite_verts_counter = 0;
+	for (int i=0;i<vertex_normals.size();i++)
+	{
+		for (int j=0;j<xyzs;j++)
 		{
-			for (int j=0;j<xyzs;j++)
-			{
-			    if (std::isfinite(vertex_normals[i][j]) == false)
-				{	
-					non_finite_verts_counter += 1;    
-					vertex_normals[i][j] = 0;
-				}
+		    if (std::isfinite(vertex_normals[i][j]) == false)
+			{	
+				non_finite_verts_counter += 1;    
+				vertex_normals[i][j] = 0;
 			}
 		}
+	}
 
-		//std::cout << "nans in vertex normals" << " = " << non_finite_tris_counter << std::endl;
+	//std::cout << "nans in vertex normals" << " = " << non_finite_tris_counter << std::endl;
 
 
 	glColor4f(r,g,b,a);
