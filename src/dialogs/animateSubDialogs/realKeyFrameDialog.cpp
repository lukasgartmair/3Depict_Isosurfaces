// -*- C++ -*- generated by wxGlade 0.6.5 on Tue Aug 28 22:07:07 2012

#include "realKeyFrameDialog.h"

// begin wxGlade: ::extracode

// end wxGlade
#include "../../basics.h"
#include "../../wxcommon.h"
using std::string;

bool validatePoint3D(wxTextCtrl *t, Point3D &i)
{
	bool isOK;
	std::string s; 
	s= stlStr(t->GetValue());

	//string cannot be empty
	bool condition;
	condition = s.empty() || !parsePointStr(s,i);

	if(condition)
	{
		//OK, so bad things happened. Prevent the user from doing this
		isOK=false;

		//if it is bad and non-empty, highlight it as such
		// if it is empty, then just set it to normal colour
		if(s.empty())
			t->SetBackgroundColour(wxNullColour);
		else
			t->SetBackgroundColour(*wxCYAN);
	}
	else
	{
		t->SetBackgroundColour(wxNullColour);
		isOK=true;
	}


	return isOK;
}

template<class T>
RealKeyFrameDialog<T>::RealKeyFrameDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
	wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxMAXIMIZE_BOX|wxMINIMIZE_BOX)
{
	// begin wxGlade: RealKeyFrameDialog<T>::RealKeyFrameDialog
	sizerMainArea_staticbox = new wxStaticBox(this, -1, wxT("Keyframe Data"));
	labelTransition = new wxStaticText(this, wxID_ANY, wxT("Transition"));
	//FIXME: This is declared in animator.h, use it!
	const wxString comboTransition_choices[] = {
        wxT("Step"),
        wxT("Ramp")
    };
	comboTransition = new wxComboBox(this, ID_COMBO_TRANSITION, wxT(""), wxDefaultPosition, wxDefaultSize, 2, comboTransition_choices, wxCB_DROPDOWN|wxCB_READONLY);
	labelFrameStart = new wxStaticText(this, wxID_ANY, wxT("Start Frame"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
	textFrameStart = new wxTextCtrl(this, ID_TEXT_FRAME_START, wxEmptyString);
	labelFrameEnd = new wxStaticText(this, wxID_ANY, wxT("End Frame"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
	textFrameEnd = new wxTextCtrl(this, ID_TEXT_FRAME_END, wxEmptyString);
	verticalLine = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_VERTICAL);
	labelStartVal = new wxStaticText(this, wxID_ANY, wxT("Start Value"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
	textStartVal = new wxTextCtrl(this, ID_TEXT_INITIAL_VALUE, wxEmptyString);
	labelEndVal = new wxStaticText(this, wxID_ANY, wxT("End Value"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT);
	textEndVal = new wxTextCtrl(this, ID_TEXT_FINAL_VALUE, wxEmptyString);
	buttonCancel = new wxButton(this, wxID_CANCEL, wxEmptyString);
	buttonOK = new wxButton(this, wxID_OK, wxEmptyString);

	startFrameOK=endFrameOK=startValueOK=endValueOK=false;

	const int DEFAULT_TRANSITION=TRANSITION_INTERP;
	comboTransition->SetSelection(DEFAULT_TRANSITION);
	transitionMode=DEFAULT_TRANSITION;
	
	set_properties();
	do_layout();
	// end wxGlade
}



BEGIN_EVENT_TABLE_TEMPLATE1(RealKeyFrameDialog, wxDialog,T)
	// begin wxGlade: RealKeyFrameDialog<T>::event_table
	EVT_COMBOBOX(ID_COMBO_TRANSITION, RealKeyFrameDialog::OnComboTransition)
	EVT_TEXT(ID_TEXT_FRAME_START, RealKeyFrameDialog::OnTextStartFrame)
	EVT_TEXT(ID_TEXT_FRAME_END, RealKeyFrameDialog::OnTextEndFrame)
	EVT_TEXT(ID_TEXT_INITIAL_VALUE, RealKeyFrameDialog::OnTextStartValue)
	EVT_TEXT(ID_TEXT_FINAL_VALUE, RealKeyFrameDialog::OnTextEndValue)
	// end wxGlade
END_EVENT_TABLE();

template<class T>
void RealKeyFrameDialog<T>::updateOKButton()
{
	bool isOK=true;
	isOK&=startFrameOK;
	isOK&=endFrameOK;
	isOK&=startValueOK;
	isOK&=endValueOK;

	//Ensure start frame is > end frame
	if(isOK)
	{
		isOK&=(startFrame<endFrame);
		if(!isOK)
		{
			textFrameStart->SetBackgroundColour(*wxCYAN);
			textFrameEnd->SetBackgroundColour(*wxCYAN);
		}
		else
		{
			textFrameStart->SetBackgroundColour(wxNullColour);
			textFrameEnd->SetBackgroundColour(wxNullColour);
		}
	}
	
	buttonOK->Enable(isOK);
}

template<class T>
void RealKeyFrameDialog<T>::OnComboTransition(wxCommandEvent &event)
{
}


template<class T>
void RealKeyFrameDialog<T>::OnTextStartFrame(wxCommandEvent &event)
{
	startFrameOK=validateTextAsStream(textFrameStart,startFrame,intIsPositive);
	updateOKButton();
}

template<class T>
void RealKeyFrameDialog<T>::OnTextEndFrame(wxCommandEvent &event)
{
	endFrameOK=validateTextAsStream(textFrameEnd,endFrame,intIsPositive);
	updateOKButton();
}

template<class T>
void RealKeyFrameDialog<T>::OnTextStartValue(wxCommandEvent &event)
{
	startValueOK=validateTextAsStream(textStartVal,startValue);
	updateOKButton();
}

template<>
void RealKeyFrameDialog<Point3D>::OnTextStartValue(wxCommandEvent &evt)
{
	startValueOK=validatePoint3D(textStartVal,startValue);
	updateOKButton();
}


template<class T>
void RealKeyFrameDialog<T>::OnTextEndValue(wxCommandEvent &event)
{
	endValueOK=validateTextAsStream(textEndVal,endValue);
	updateOKButton();
}

template<>
void RealKeyFrameDialog<Point3D>::OnTextEndValue(wxCommandEvent &evt)
{
	endValueOK=validatePoint3D(textEndVal,endValue);
	updateOKButton();
}

// wxGlade: add RealKeyFrameDialog event handlers


template<class T>
void RealKeyFrameDialog<T>::set_properties()
{
	// begin wxGlade: RealKeyFrameDialog<T>::set_properties
	comboTransition->SetSelection(-1);
	// end wxGlade
}


template<class T>
void RealKeyFrameDialog<T>::do_layout()
{
	// begin wxGlade: RealKeyFrameDialog<T>::do_layout
	wxBoxSizer* sizerTop = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizerBUttons = new wxBoxSizer(wxHORIZONTAL);
	wxStaticBoxSizer* sizerMainArea = new wxStaticBoxSizer(sizerMainArea_staticbox, wxHORIZONTAL);
	wxBoxSizer* sizerRight = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizerRightEnd = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizerRightStart = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizerLeft = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizerEndFrame = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizerStartFrame = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizerTransition = new wxBoxSizer(wxHORIZONTAL);
	sizerTop->Add(20, 5, 0, 0, 0);
	sizerMainArea->Add(10, 20, 0, 0, 0);
	sizerLeft->Add(20, 10, 0, 0, 0);
	sizerTransition->Add(labelTransition, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 14);
	sizerTransition->Add(comboTransition, 1, wxLEFT|wxALIGN_CENTER_VERTICAL, 5);
	sizerLeft->Add(sizerTransition, 1, wxEXPAND, 0);
	sizerStartFrame->Add(labelFrameStart, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 5);
	sizerStartFrame->Add(textFrameStart, 1, wxLEFT|wxALIGN_CENTER_VERTICAL, 4);
	sizerLeft->Add(sizerStartFrame, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
	sizerEndFrame->Add(labelFrameEnd, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 12);
	sizerEndFrame->Add(textFrameEnd, 1, wxLEFT|wxALIGN_CENTER_VERTICAL, 4);
	sizerLeft->Add(sizerEndFrame, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
	sizerLeft->Add(20, 10, 0, 0, 0);
	sizerMainArea->Add(sizerLeft, 1, wxEXPAND, 0);
	sizerMainArea->Add(verticalLine, 0, wxLEFT|wxRIGHT|wxEXPAND, 5);
	sizerRight->Add(20, 20, 1, 0, 0);
	sizerRightStart->Add(labelStartVal, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 5);
	sizerRightStart->Add(textStartVal, 1, wxLEFT|wxALIGN_CENTER_VERTICAL, 4);
	sizerRight->Add(sizerRightStart, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
	sizerRightEnd->Add(labelEndVal, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 9);
	sizerRightEnd->Add(textEndVal, 1, wxLEFT|wxALIGN_CENTER_VERTICAL, 4);
	sizerRight->Add(sizerRightEnd, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
	sizerRight->Add(20, 20, 1, 0, 0);
	sizerMainArea->Add(sizerRight, 1, wxEXPAND, 0);
	sizerMainArea->Add(10, 20, 0, 0, 0);
	sizerTop->Add(sizerMainArea, 1, wxEXPAND, 0);
	sizerBUttons->Add(20, 20, 1, 0, 0);
	sizerBUttons->Add(buttonCancel, 0, wxALL, 4);
	sizerBUttons->Add(buttonOK, 0, wxALL, 4);
	sizerTop->Add(sizerBUttons, 0, wxEXPAND, 0);
	SetSizer(sizerTop);
	sizerTop->Fit(this);
	Layout();
	// end wxGlade
}

